name: Deploy

on:
  repository_dispatch:
    types: [cms-update]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.3.0

      - name: Update content.json
        if: github.event_name == 'repository_dispatch'
        run: |
          bun run -e '
          const fs = require("fs");
          const path = "./content.json";
          
          const payload = ${{ toJSON(github.event.client_payload) }};
          
          if (!payload._id) {
            console.error("❌ No _id in payload");
            process.exit(1);
          }
          
          let content = [];
          if (fs.existsSync(path)) {
            content = JSON.parse(fs.readFileSync(path, "utf-8"));
          }
          
          const index = content.findIndex(item => item._id === payload._id);
          
          if (index !== -1) {
            // Atualizar existente
            content[index] = { ...content[index], ...payload };
            console.log(`✅ Updated item with _id: ${payload._id}`);
          } else {
            // Adicionar novo
            content.push(payload);
            console.log(`✅ Added new item with _id: ${payload._id}`);
          }
          
          fs.writeFileSync(path, JSON.stringify(content, null, 2));
          '

      - name: Commit content.json
        if: github.event_name == 'repository_dispatch'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add content.json
          git diff --staged --quiet || git commit -m "chore: update content.json from CMS [skip ci]"
          git push
        continue-on-error: true

      - name: Install dependencies
        run: |
          cd app
          bun install --frozen-lockfile

      - name: Build
        run: |
          cd app
          bun run build
        env:
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}

      - name: Deploy
        run: |
          cd app
          bun run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_WEBHOOK_SECRET: ${{ secrets.SANITY_WEBHOOK_SECRET }}
          GH_REPO: ${{ secrets.GH_REPO }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
